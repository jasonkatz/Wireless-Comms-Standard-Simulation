function [tx, bits, gain] = txShabbaton()
% ECE-408 Project 1 - Transmitter
% Jessica Marshall, Elie Lerea and Jason Katz - Team Shabbaton
% 802.11n Specification Implementation

% DO NOT TOUCH BELOW
fsep = (20e6) / 64;
nsamp = 16;
Fs = 1e7;
M = 16;   % THIS IS THE M-ARY # for the FSK MOD.  You have 16 channels available
% THE ABOVE CODE IS PURE EVIL

msgM = 2; % Select 4 QAM for my message signal
k = log2(msgM);

numChannels = 64;

% Generate data (4096 - 16 channels ; 2048 - 8 channels ; 1024 - 4 channels
bits = randi([0 1],128 * M * k,1); % Generate random bits, pass these out of function, unchanged

code = bits;

% Convert to symbols
syms = bi2de(reshape(code,k,length(code)/k).','left-msb')';

% Random msgM-QAM Signal
msg = qammod(syms, msgM);

% % Check length
% msglength = length(msg);
% if(msglength ~= numChannels * 1024)
%     error('You smurfed up')
% end

%% You should stop editing code starting here

%% Serioulsy, Stop.

% Generate a carrier
tonecoeff = 0;

% Use ifft to get orthogonal frequency vectors for OFDM
msgOFDM = ifft(msg, numChannels);

% Convert to column vector
msgOFDM = msgOFDM(:);

% Upsample for cases where we don't use all channels
msgOFDM = rectpulse(msgOFDM, 16 / M);

% multiply upsample message by carrier  to get transmitted signal
tx = msgOFDM.'.*carrier;

% scale the output
gain = std(tx);
tx = tx./gain;

end